📌 Reference Variables in C++ – Notes

🔹 Definition

    A reference variable is an alias for another variable.

    It provides an alternative name for an existing variable.

int a = 10;
int &ref = a; // ref is a reference to a

🔹 Key Characteristics

    Must be initialized at the time of declaration.

    Cannot be changed to refer to another variable after initialization.

    Acts like a pointer, but with automatic dereferencing.

    Modifying the reference modifies the original variable.

🔹 Syntax

type &refName = originalVariable;

Example:

int x = 5;
int &y = x;
y = 20; // x becomes 20

🔹 Why Use References?

    To avoid copying large objects (performance).

    To modify function arguments (pass-by-reference).

    Useful in operator overloading, function return types, etc.

🔹 Use in Functions

🔸 Pass-by-Reference

void increment(int &n) {
    n++;
}

Usage:

int a = 5;
increment(a); // a becomes 6

🔸 Return by Reference

int& getElement(int arr[], int index) {
    return arr[index];
}

🔹 Const Reference

    Used to pass large objects without copying.

    Ensures the value cannot be modified.

void print(const string &name) {
    cout << name;
}

🔹 Reference vs Pointer

| Feature             | Reference | Pointer          |
| ------------------- | --------- | ---------------- |
| Can be null         | ❌ No      | ✅ Yes            |
| Must be initialized | ✅ Yes     | ❌ No             |
| Can be reassigned   | ❌ No      | ✅ Yes            |
| Syntax              | Cleaner   | Slightly complex |
| Dereferencing       | Implicit  | Explicit (`*`)   |


🔹 Common Uses

    Function arguments and return values

    Operator overloading

    Range-based for loops:

for (int &n : vec) {
    n++; // modifies elements in vec
}

📌 Dynamic Memory Allocation in C++ – Notes

🔹 What is Dynamic Memory Allocation?

    Allocating memory at runtime using pointers.

    Memory is allocated on the heap, not the stack.

    Useful when the size of data is not known at compile time.

🔹 Operators Used

| Operator   | Purpose                  | Used For     |
| ---------- | ------------------------ | ------------ |
| `new`      | Allocates memory         | Single/Array |
| `delete`   | Deallocates memory       | Single       |
| `delete[]` | Deallocates array memory | Array        |


🔹 Single Variable Allocation

int *ptr = new int;     // allocates memory for 1 int
*ptr = 10;              // assigning value
delete ptr;             // deallocating memory

🔹 Array Allocation

int *arr = new int[5];  // allocates array of size 5
arr[0] = 1; arr[1] = 2; // assigning values
delete[] arr;           // deallocating array memory

🔹 Dynamic Allocation for Other Types

float *f = new float(3.14);
char *ch = new char('A');
delete f;
delete ch;

🔹 Common Mistakes to Avoid

    Memory leak: forgetting to delete allocated memory.

    Dangling pointer: using pointer after deleting memory.

    Using delete instead of delete[] for arrays.

    Accessing out-of-bound memory.

🔹 Example: Dynamic Array Input

int size;
cout << "Enter size: ";
cin >> size;

int *arr = new int[size];
for (int i = 0; i < size; i++) {
    cin >> arr[i];
}

// process the array...

delete[] arr; // free the memory

🔹 Smart Pointers (C++11+) 🚀

To avoid manual memory management and leaks:

#include <memory>
std::unique_ptr<int> p = std::make_unique<int>(10);

Types:

    std::unique_ptr

    std::shared_ptr

    std::weak_ptr

📌 Static vs Dynamic Memory Allocation in C++

| Feature                 | **Static Memory Allocation**                          | **Dynamic Memory Allocation**                                |
| ----------------------- | ----------------------------------------------------- | ------------------------------------------------------------ |
| **Definition**          | Memory allocated **at compile time**                  | Memory allocated **at runtime**                              |
| **Memory Location**     | Stack or Data Segment (global/static vars)            | Heap                                                         |
| **Size Known?**         | Must be known **at compile time**                     | Can be decided **at runtime**                                |
| **Declaration**         | Regular variable declaration                          | Uses `new` / `delete` operators                              |
| **Flexibility**         | Less flexible (fixed size)                            | More flexible (resize or decide at runtime)                  |
| **Example**             | `int a = 10;`<br>`int arr[5];`                        | `int* a = new int;`<br>`int* arr = new int[5];`              |
| **Memory Management**   | Handled **automatically** by the compiler             | You must **manually deallocate** using `delete` / `delete[]` |
| **Speed**               | Faster (allocation at compile time)                   | Slower (heap allocation takes time)                          |
| **Memory Efficiency**   | Less efficient if large but unused space is allocated | More efficient as memory is allocated as needed              |
| **Lifetime**            | Lives until the **scope ends**                        | Lives until **manually deleted** or program ends             |
| **Risk of Memory Leak** | ❌ No                                                  | ✅ Yes, if not deleted properly                               |
| **Access**              | Direct (through variable names)                       | Indirect (through pointers)                                  |

🔹 Examples

Static:

int x = 10;
int arr[100];

Dynamic:

int* x = new int(10);
int* arr = new int[100];

delete x;
delete[] arr;

🔹 Use Cases

| Use Case                          | Prefer...              |
| --------------------------------- | ---------------------- |
| Fixed-size arrays or variables    | **Static Allocation**  |
| Variable size (user input, large) | **Dynamic Allocation** |
