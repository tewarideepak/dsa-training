🌀 Polymorphism in C++ – OOP Notes

Polymorphism means “many forms”. It allows one interface to be used for different underlying forms (data types). In C++, polymorphism enables objects of different derived classes to be treated as objects of a common base class, especially using pointers or references.

🔸 Types of Polymorphism in C++

| Type             | Description                             | Example                                          |
| ---------------- | --------------------------------------- | ------------------------------------------------ |
| **Compile-time** | Function/Operator overloading           | `int add(int, int)`<br>`float add(float, float)` |
| **Run-time**     | Virtual functions and inheritance-based | `Base* ptr = new Derived();`                     |


🔹 1. Compile-Time Polymorphism

Achieved by function overloading and operator overloading.
🔸 Function Overloading

class Print {
public:
    void show(int x) { cout << "Int: " << x << endl; }
    void show(string x) { cout << "String: " << x << endl; }
};

🔸 Operator Overloading

class Complex {
public:
    int real, imag;
    Complex(int r, int i) : real(r), imag(i) {}
    Complex operator+(const Complex& c) {
        return Complex(real + c.real, imag + c.imag);
    }
};

🔹 2. Run-Time Polymorphism

Achieved via virtual functions, function overriding, and base class pointers.
✅ Requirements:

    Base class must have a virtual function

    Function should be overridden in the derived class

    Called via a base class pointer or reference

🔸 Example:

class Animal {
public:
    virtual void speak() {
        cout << "Animal speaks" << endl;
    }
};

class Dog : public Animal {
public:
    void speak() override {
        cout << "Dog barks" << endl;
    }
};

int main() {
    Animal* a = new Dog();
    a->speak();  // Output: Dog barks (not Animal speaks)
}

🔸 Virtual vs Non-Virtual Function

| Function Type | Behavior                                      |
| ------------- | --------------------------------------------- |
| Non-virtual   | Calls base class version (static binding)     |
| Virtual       | Calls derived class version (dynamic binding) |


🔸 Pure Virtual Function & Abstract Class

class Shape {
public:
    virtual void draw() = 0;  // Pure virtual
};

class Circle : public Shape {
public:
    void draw() override {
        cout << "Drawing circle" << endl;
    }
};

    Makes Shape an abstract class

    Cannot instantiate Shape directly

    Forces derived classes to implement draw()

🔸 Summary

| Type         | Mechanism         | Binding Time    | Example                        |
| ------------ | ----------------- | --------------- | ------------------------------ |
| Compile-time | Overloading       | Early (compile) | `print(int)` vs `print(float)` |
| Run-time     | Virtual functions | Late (runtime)  | `Animal* a = new Dog();`       |
