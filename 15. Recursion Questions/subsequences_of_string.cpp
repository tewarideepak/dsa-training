//  Problem statement

// You are given a string 'STR' containing lowercase English letters from a to z inclusive. Your task is to find all non-empty possible subsequences of 'STR'.

// A Subsequence of a string is the one which is generated by deleting 0 or more letters from the string and keeping the rest of the letters in the same order.

// Detailed explanation ( Input/output format, Notes, Images )
// Constraints:

// 1 <= T <= 10
// 1 <=  |STR| <= 16

// Where |STR| represents the length of the string 'STR'.

// Time Limit: 1 sec

// Sample Input 1:

// 1
// abc

// Sample Output 1:

// a ab abc ac b bc c

// Explanation of sample input 1:

// All possible subsequences of abc are :
// “a” , “b” , “c” , “ab” , “bc” , “ac”, “abc”

// Sample Input 2:

// 1
// bbb

// Sample Output 2:

// b b b bb bb bb bbb

#include <bits/stdc++.h>
using namespace std;

void generateSubsequences(string str, string &output, int index, vector<string> &result)
{
    // Base Case
    if (index >= str.length())
    {
        if (!output.empty()) // Only include non-empty subsequences
            result.push_back(output);
        return;
    }

    // Exclude current character
    generateSubsequences(str, output, index + 1, result);

    // Include current character
    output.push_back(str[index]);
    generateSubsequences(str, output, index + 1, result);
    output.pop_back(); // Backtrack
}

vector<string> subsequences(string str)
{
    vector<string> result;
    string output = "";
    int index = 0;

    generateSubsequences(str, output, index, result);

    return result;
}

int main()
{
    string input = "abc";
    vector<string> result = subsequences(input);
    for (const string &s : result)
    {
        cout << s << " ";
    }
    return 0;
}