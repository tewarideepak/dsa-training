📌 Pointers in C++ — Notes

✅ Definition

    A pointer is a variable that stores the memory address of another variable.

    It "points to" the location in memory where data is stored.

🧠 Basic Syntax

int a = 10;
int* ptr = &a; // ptr stores the address of variable a

    * declares a pointer.

    & is the address-of operator, gives the address of a variable.

🔍 Key Concepts

| Concept          | Symbol    | Description                                          |
| ---------------- | --------- | ---------------------------------------------------- |
| Address-of       | `&`       | Gets the address of a variable                       |
| Dereference      | `*`       | Accesses the value at the address the pointer stores |
| Null Pointer     | `nullptr` | Special pointer that points to nothing               |
| Dangling Pointer |           | Points to memory that is freed or out of scope       |
| Wild Pointer     |           | Uninitialized pointer                                |

💡 Pointer Declaration

int* p;    // pointer to int
char* c;   // pointer to char
float* f;  // pointer to float

🎯 Example

#include <iostream>
using namespace std;

int main() {
    int x = 5;
    int* ptr = &x;

    cout << "Value of x: " << x << endl;               // 5
    cout << "Address of x: " << &x << endl;            // e.g., 0x61ff08
    cout << "Value stored in ptr: " << ptr << endl;    // same as &x
    cout << "Value pointed by ptr: " << *ptr << endl;  // 5
}

🧮 Pointer Arithmetic

    Only allowed with pointers to elements of arrays.

int arr[] = {10, 20, 30};
int* p = arr;

cout << *(p + 1); // 20

| Operation | Meaning                    |
| --------- | -------------------------- |
| `p++`     | Move to next element       |
| `p--`     | Move to previous element   |
| `p + n`   | Move `n` elements forward  |
| `p - n`   | Move `n` elements backward |


Array name is a constant pointer.

int arr[] = {1, 2, 3};
int* p = arr;

cout << *p;     // 1
cout << *(p+1); // 2

🧱 Pointer to Pointer

    A pointer that stores the address of another pointer.

int x = 5;
int* p = &x;
int** pp = &p;

cout << **pp; // 5

🛠️ Pointers with Functions

    Call by reference using pointers:

void modify(int* ptr) {
    *ptr = 20;
}

int main() {
    int x = 10;
    modify(&x);
    cout << x; // 20
}

🧰 Dynamic Memory with Pointers

int* p = new int;   // dynamically allocated int
*p = 10;

delete p;           // deallocate memory
p = nullptr;

🧼 Best Practices

    Always initialize pointers:

    int* p = nullptr;

    After delete, set pointer to nullptr to avoid dangling pointers.

    Avoid pointer arithmetic unless necessary.

    Use smart pointers (std::unique_ptr, std::shared_ptr) in modern C++.

⚠️ Common Errors

| Mistake                     | Result                   |
| --------------------------- | ------------------------ |
| Dereferencing null pointer  | Runtime crash (segfault) |
| Forgetting `delete`         | Memory leak              |
| Using uninitialized pointer | Undefined behavior       |
| Using freed memory          | Dangling pointer bug     |

📌 1. Definition

    Pointer: A variable that stores the memory address of another variable.

    Array: A collection of contiguous memory locations of the same data type.

int x = 10;
int* ptr = &x;     // pointer to int
int arr[5] = {1, 2, 3, 4, 5};  // array of ints

📌 2. Memory Allocation

    Array: Allocates a fixed-size block of memory at compile time.

    Pointer: Can point to dynamically or statically allocated memory.

int arr[3];              // fixed at compile time
int* ptr = new int[3];   // allocated at runtime

📌 3. Syntax and Access

    Both use [] for element access, but pointers require memory to be allocated beforehand.

int arr[3] = {10, 20, 30};
int* ptr = arr;

std::cout << arr[1];   // 20
std::cout << ptr[1];   // 20 (pointer arithmetic)

📌 4. Size

    sizeof(array) gives total memory: n × sizeof(type)

    sizeof(pointer) gives size of the pointer itself (usually 4 or 8 bytes)

int arr[5];
int* ptr = arr;

sizeof(arr); // 20 (5 × 4 bytes if int = 4B)
sizeof(ptr); // 8 (on 64-bit system)

📌 5. Modifiability

    Array names are not modifiable (they decay to pointer but can't be reassigned).

    Pointers can be reassigned to point elsewhere.

int a[5], b[5];
int* p = a;
p = b;       // ✅ OK

a = b;       // ❌ Error: array name is not assignable

📌 6. Pointer Arithmetic

    Pointers support arithmetic (+, -) to navigate memory.

    Arrays don’t support pointer arithmetic directly.

int arr[3] = {1, 2, 3};
int* p = arr;

std::cout << *(p + 1);  // 2

📌 7. Function Arguments

    Arrays decay to pointers when passed to functions.

    You usually receive an int* when you pass an int[].

void func(int* ptr) {
  std::cout << ptr[0];
}

int arr[3] = {10, 20, 30};
func(arr);  // ✅ treated as pointer

📌 8. Nullability

    Pointers can be nullptr or NULL.

    Arrays cannot be null — they must point to valid memory.

int* p = nullptr;  // ✅ OK
int arr[5];        // always allocated

✅ Summary Table

| Feature             | Array                   | Pointer                      |
| ------------------- | ----------------------- | ---------------------------- |
| Type                | Fixed-size memory block | Stores address of a variable |
| Memory              | Compile-time allocation | Can be dynamic or static     |
| Size (sizeof)       | Total size of elements  | Size of address only         |
| Modifiable?         | ❌ Can't reassign        | ✅ Can be reassigned          |
| Supports arithmetic | ❌ No                    | ✅ Yes                        |
| Can be null?        | ❌ No                    | ✅ Yes                        |
| Passed to function  | Decays to pointer       | Passed as-is                 |

📘 Char Arrays using Pointers in C++

✅ 1. Declaration of char array using pointer

char *str = "Hello";

    "Hello" is a string literal stored in read-only memory.

    str points to the first character 'H'.

    Immutable → You should not modify characters in this string.

str[0] = 'h';  // ❌ Undefined Behavior

✅ 2. Modifiable char array with pointer

char arr[] = "Hello";
char *ptr = arr;

    "Hello" is copied into the stack memory.

    arr is an array (modifiable), and ptr points to its first element.

    You can safely modify:

ptr[0] = 'h';  // ✅ Works fine

✅ 3. Accessing characters using pointer

char arr[] = "World";
char *p = arr;

cout << *p;     // W
cout << *(p+1); // o

✅ 4. Pointer arithmetic with char arrays

char str[] = "Test";
char *p = str;

while(*p != '\0') {
    cout << *p;
    p++;
}

    Loops through and prints each character.

    *p gives the character.

    p++ moves to the next character.

✅ 5. Difference between char[] and char*

| Feature              | `char arr[] = "Hi";` | `char *ptr = "Hi";`                  |
| -------------------- | -------------------- | ------------------------------------ |
| Memory location      | Stack                | Read-only (or static area)           |
| Modifiable           | ✅ Yes                | ❌ No (undefined behavior)            |
| Size (with `sizeof`) | `3` (includes `\0`)  | `8` (pointer size, not content size) |


✅ 6. Common operations

    Length using strlen(ptr)

    Copy: strcpy(dest, src);

    Compare: strcmp(str1, str2);

    Concatenate: strcat(str1, str2);

char a[20] = "Hi ";
char b[] = "there";
strcat(a, b); // a = "Hi there"

✅ 7. Dynamic char array using pointer

char *ptr = new char[100];
strcpy(ptr, "Dynamic memory");
cout << ptr;
delete[] ptr;

✅ 8. Null terminator \0

    Every C-style string must end with \0 (null character).

    Used by functions like strlen, strcpy to detect end.

💡 Summary

    Use char[] for modifiable strings.

    Use char* carefully; string literals are not modifiable.

    Prefer std::string in modern C++ unless low-level manipulation is needed.

🔁 Double Pointer in C++

✅ Definition:

A double pointer (or pointer to a pointer) is a variable that stores the address of another pointer.

int **ptr; // double pointer to an int

🧠 Memory Levels:

    int a = 10; → a stores value 10

    int *p = &a; → p stores address of a

    int **pp = &p; → pp stores address of p

a   = 10         (value)
p   = &a         (pointer to value)
pp  = &p         (pointer to pointer)

📌 Example Code:

#include <iostream>
using namespace std;

int main() {
    int a = 10;
    int *p = &a;
    int **pp = &p;

    cout << "Value of a: " << a << endl;
    cout << "Value via *p: " << *p << endl;
    cout << "Value via **pp: " << **pp << endl;

    return 0;
}

💡 Output:

Value of a: 10
Value via *p: 10
Value via **pp: 10

🧩 Why Use Double Pointers?
Use Case	Description
Dynamic memory allocation	Used with arrays of pointers (e.g., 2D arrays)
Function parameters	To modify the actual pointer passed (e.g., allocating memory inside function)
Complex data structures	Useful in trees, graphs, linked lists, etc.
🛠️ Function with Double Pointer Example:

void allocate(int **ptr) {
    *ptr = new int;
    **ptr = 42;
}

int main() {
    int *p = nullptr;
    allocate(&p);
    cout << *p << endl; // 42
    delete p;
}

📚 Double Pointer with 2D Array:

int **matrix = new int*[rows];
for (int i = 0; i < rows; i++) {
    matrix[i] = new int[cols];
}

🧹 Deallocation (Important):

for (int i = 0; i < rows; i++) {
    delete[] matrix[i];
}
delete[] matrix;

⚠️ Common Pitfalls:

    Forgetting to deallocate memory → memory leaks.

    Misunderstanding levels of indirection (* vs **).

    Using uninitialized double pointers.

🧮 Visual Representation:

int a = 5;
int *p = &a;
int **pp = &p;

pp --> p --> a --> 5