ðŸ§  Padding and Greedy Alignment in C++ (Memory Layout)

When dealing with memory layout of structs/classes in C++, concepts like padding and alignment are crucial for understanding performance and memory usage.
ðŸ“¦ 1. Padding in C++

Padding refers to the extra unused memory added by the compiler to satisfy alignment constraints of data members.
ðŸ§± Example:

struct A {
    char c;     // 1 byte
    int i;      // 4 bytes
};

Even though c is 1 byte and i is 4 bytes, this structure typically takes 8 bytes, not 5.
Memory Layout	Byte Offset
c	0
padding	1 to 3
i	4 to 7

âœ… Padding between c and i ensures that i is aligned to a 4-byte boundary (required by most architectures).
ðŸ§® 2. Alignment

Alignment is the requirement that data be stored at memory addresses that are multiples of the data typeâ€™s size.
| Type     | Typical Alignment |
| -------- | ----------------- |
| `char`   | 1 byte            |
| `int`    | 4 bytes           |
| `double` | 8 bytes           |


ðŸ§² 3. Greedy Alignment

Greedy alignment refers to the compiler placing members in the order they are declared, adding padding as needed to satisfy alignment, even if it wastes space.

struct B {
    char c1;  // 1 byte
    double d; // 8 bytes
    char c2;  // 1 byte
};

Expected layout (with greedy alignment):
| Member    | Offset       |
| --------- | ------------ |
| `c1`      | 0            |
| padding   | 1â€“7          |
| `d`       | 8â€“15         |
| `c2`      | 16           |
| padding   | 17â€“23        |
| **Total** | **24 bytes** |


âœ… How to Reduce Padding: Reorder Members

struct Optimized {
    double d;  // 8 bytes
    char c1;   // 1 byte
    char c2;   // 1 byte
};

| Member    | Offset       |
| --------- | ------------ |
| `d`       | 0â€“7          |
| `c1`      | 8            |
| `c2`      | 9            |
| padding   | 10â€“15        |
| **Total** | **16 bytes** |


ðŸ§° Tools

    Use sizeof() to check struct size.

    Use alignof() (C++11+) to check alignment requirement.

    Compiler flags (e.g., -Wpadded in GCC/Clang) help detect padding.

ðŸš« Padding Removal Techniques

    Reorder members from largest to smallest type.

    Use #pragma pack(1) (not recommended for portable code).

    Consider bit-fields for space-critical structures.

    Use manual memory management only if necessary.

ðŸ“Œ Summary

| Concept              | Description                                            |
| -------------------- | ------------------------------------------------------ |
| **Padding**          | Extra space added to satisfy alignment rules           |
| **Alignment**        | Requirement for memory address to match type           |
| **Greedy Alignment** | Compiler aligns as declared, potentially wasting space |
| **Optimization**     | Rearranging members reduces padding                    |
